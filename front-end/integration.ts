import { ethers } from "ethers";
import { SigningCosmWasmClient } from "@cosmjs/cosmwasm-stargate";
import { DirectSecp256k1Wallet } from "@cosmjs/proto-signing";
import { GasPrice } from "@cosmjs/stargate";
import axios from "axios"; // For interacting with the off-chain relayer

// --- Configuration --- //

// EVM Chain (e.g., Ethereum, Cronos EVM side)
const EVM_RPC_URL = "http://localhost:8545"; // Replace with your EVM RPC endpoint
const EVM_CONTRACT_ADDRESS = "0x...your_evm_contract_address..."; // Your deployed EVM Escrow/Resolver
const EVM_CONTRACT_ABI = [
  // Minimal ABI for demonstration
  "function createSwap(bytes32 _secretHash, address _taker, uint256 _amount, uint256 _timelock, string _destChainId)",
  "function completeSwap(bytes32 _secret)",
  "function cancelSwap(bytes32 _secretHash)",
  "event SwapCreated(bytes32 indexed secretHash, address indexed maker, address indexed taker, uint256 amount, uint256 timelock, string destChainId)",
];

// CosmWasm Chain (e.g., Cronos CosmWasm side)
const COSMWASM_RPC_URL = "http://localhost:26657"; // Replace with your CosmWasm RPC endpoint
const COSMWASM_CONTRACT_ADDRESS = "cosmos1...your_cosmwasm_contract_address..."; // Your deployed CosmWasm SourceEscrow/Resolver
const COSMWASM_GAS_PRICE = GasPrice.fromString("0.002uatom"); // Adjust as needed

// Relayer API Endpoint
const RELAYER_API_URL = "http://localhost:8080/api"; // Replace with your Go Relayer API endpoint

// --- Utility Functions --- //

/**
 * Connects to the EVM chain and returns a provider and signer.
 */
async function connectEVM(): Promise<{ provider: ethers.JsonRpcProvider; signer: ethers.Signer }> {
  const provider = new ethers.JsonRpcProvider(EVM_RPC_URL);
  const signer = await provider.getSigner();
  console.log(`Connected to EVM chain: ${await provider.getNetwork().then(n => n.name)}`);
  console.log(`EVM Signer Address: ${await signer.getAddress()}`);
  return { provider, signer };
}

/**
 * Connects to the CosmWasm chain and returns a client and wallet.
 */
async function connectCosmWasm(): Promise<{ client: SigningCosmWasmClient; wallet: DirectSecp256k1Wallet }> {
  // In a real app, you'd use Keplr or another wallet extension
  const wallet = await DirectSecp256k1Wallet.generate(); // For demo purposes
  const [firstAccount] = await wallet.getAccounts();

  const client = await SigningCosmWasmClient.connectWithSigner(
    COSMWASM_RPC_URL,
    wallet,
    { gasPrice: COSMWASM_GAS_PRICE }
  );
  console.log(`Connected to CosmWasm chain: ${await client.getChainId()}`);
  console.log(`CosmWasm Wallet Address: ${firstAccount.address}`);
  return { client, wallet };
}

/**
 * Generates a random secret and its SHA256 hash.
 */
function generateSecretAndHash(): { secret: string; secretHash: string } {
  const secret = ethers.utils.hexlify(ethers.utils.randomBytes(32));
  const secretHash = ethers.utils.sha256(secret);
  return { secret, secretHash };
}

// --- Frontend Interaction Functions --- //

/**
 * Initiates a cross-chain swap from the EVM side.
 * @param amount The amount to swap.
 * @param destChainId The ID of the destination chain (CosmWasm).
 * @param takerAddress The address of the taker on the destination chain.
 */
async function initiateSwapEVM(
  amount: string,
  destChainId: string,
  takerAddress: string
): Promise<void> {
  console.log("\n--- Initiating Swap from EVM ---");
  const { signer } = await connectEVM();
  const contract = new ethers.Contract(EVM_CONTRACT_ADDRESS, EVM_CONTRACT_ABI, signer);

  const { secret, secretHash } = generateSecretAndHash();
  const timelock = Math.floor(Date.now() / 1000) + 3600; // 1 hour timelock

  try {
    const tx = await contract.createSwap(
      secretHash,
      takerAddress,
      ethers.utils.parseEther(amount),
      timelock,
      destChainId
    );
    console.log(`EVM Swap initiated. Transaction hash: ${tx.hash}`);
    await tx.wait();
    console.log("EVM Swap transaction confirmed.");

    // After creating the swap, you might want to inform the relayer
    await axios.post(`${RELAYER_API_URL}/new-evm-swap`, {
      swapId: tx.hash, // Or a unique ID generated by your contract
      secretHash: secretHash,
      makerAddress: await signer.getAddress(),
      takerAddress: takerAddress,
      amount: amount,
      sourceChain: "EVM",
      destChain: destChainId,
      timelock: timelock,
      // ... other relevant details
    });
    console.log("Relayer notified of new EVM swap.");

    // Store the secret locally or securely for later use by the maker
    console.log(`Maker Secret (KEEP SAFE): ${secret}`);

  } catch (error) {
    console.error("Error initiating EVM swap:", error);
  }
}

/**
 * Initiates a cross-chain swap from the CosmWasm side.
 * @param amount The amount to swap.
 * @param denom The denomination of the token.
 * @param destChainId The ID of the destination chain (EVM).
 * @param takerAddress The address of the taker on the destination chain.
 */
async function initiateSwapCosmWasm(
  amount: string,
  denom: string,
  destChainId: string,
  takerAddress: string
): Promise<void> {
  console.log("\n--- Initiating Swap from CosmWasm ---");
  const { client, wallet } = await connectCosmWasm();
  const [firstAccount] = await wallet.getAccounts();

  const { secret, secretHash } = generateSecretAndHash();
  const timelock = 3600; // 1 hour timelock in seconds

  try {
    const msg = {
      create_swap: {
        swap_id: `swap-${Date.now()}`,
        taker_address: takerAddress,
        taker_chain_id: destChainId,
        amount: amount,
        denom: denom,
        secret_hash: secretHash,
        timelock: timelock,
        partial_fill_amount: null, // Or a specific amount if partial fills are desired
      },
    };

    const funds = [{ denom: denom, amount: amount }];

    const tx = await client.execute(
      firstAccount.address,
      COSMWASM_CONTRACT_ADDRESS,
      msg,
      "auto",
      "Create CosmWasm Swap",
      funds
    );
    console.log(`CosmWasm Swap initiated. Transaction hash: ${tx.transactionHash}`);

    // After creating the swap, inform the relayer
    await axios.post(`${RELAYER_API_URL}/new-cosmwasm-swap`, {
      swapId: msg.create_swap.swap_id,
      secretHash: secretHash,
      makerAddress: firstAccount.address,
      takerAddress: takerAddress,
      amount: amount,
      denom: denom,
      sourceChain: "CosmWasm",
      destChain: destChainId,
      timelock: timelock,
      // ... other relevant details
    });
    console.log("Relayer notified of new CosmWasm swap.");

    // Store the secret locally or securely for later use by the maker
    console.log(`Maker Secret (KEEP SAFE): ${secret}`);

  } catch (error) {
    console.error("Error initiating CosmWasm swap:", error);
  }
}

/**
 * Completes a swap from the EVM side (taker's action).
 * @param swapId The ID of the swap to complete.
 * @param secret The secret to reveal.
 */
async function completeSwapEVM(swapId: string, secret: string): Promise<void> {
  console.log("\n--- Completing Swap on EVM ---");
  const { signer } = await connectEVM();
  const contract = new ethers.Contract(EVM_CONTRACT_ADDRESS, EVM_CONTRACT_ABI, signer);

  try {
    const tx = await contract.completeSwap(secret);
    console.log(`EVM Swap completion initiated. Transaction hash: ${tx.hash}`);
    await tx.wait();
    console.log("EVM Swap completed successfully.");
  } catch (error) {
    console.error("Error completing EVM swap:", error);
  }
}

/**
 * Completes a swap from the CosmWasm side (taker's action).
 * @param swapId The ID of the swap to complete.
 * @param secret The secret to reveal.
 */
async function completeSwapCosmWasm(swapId: string, secret: string): Promise<void> {
  console.log("\n--- Completing Swap on CosmWasm ---");
  const { client, wallet } = await connectCosmWasm();
  const [firstAccount] = await wallet.getAccounts();

  try {
    const msg = {
      complete_swap: {
        swap_id: swapId,
        secret: secret,
      },
    };

    const tx = await client.execute(
      firstAccount.address,
      COSMWASM_CONTRACT_ADDRESS,
      msg,
      "auto",
      "Complete CosmWasm Swap"
    );
    console.log(`CosmWasm Swap completed. Transaction hash: ${tx.transactionHash}`);
  } catch (error) {
    console.error("Error completing CosmWasm swap:", error);
  }
}

/**
 * Example of fetching swap status from the relayer.
 * @param swapId The ID of the swap.
 */
async function getSwapStatusFromRelayer(swapId: string): Promise<any> {
  console.log("\n--- Fetching Swap Status from Relayer ---");
  try {
    const response = await axios.get(`${RELAYER_API_URL}/swap-status/${swapId}`);
    console.log(`Status for swap ${swapId}:`, response.data);
    return response.data;
  } catch (error) {
    console.error("Error fetching swap status from relayer:", error);
    return null;
  }
}

// --- Main Execution Example --- //

async function runDemo() {
  // Example: Initiate a swap from EVM to CosmWasm
  // await initiateSwapEVM("0.1", "cronos-testnet", "cosmos1...some_taker_address...");

  // Example: Initiate a swap from CosmWasm to EVM
  // await initiateSwapCosmWasm("5000000", "uatom", "eth-sepolia", "0x...some_taker_address...");

  // Example: Complete a swap (assuming you have the swapId and secret)
  // const exampleSwapId = "0x...some_evm_tx_hash_or_cosmwasm_swap_id...";
  // const exampleSecret = "0x...the_secret_for_the_swap...";
  // await completeSwapEVM(exampleSwapId, exampleSecret);
  // await completeSwapCosmWasm(exampleSwapId, exampleSecret);

  // Example: Get status from relayer
  // await getSwapStatusFromRelayer("some_swap_id");

  console.log("\nDemo complete. Uncomment functions to run specific scenarios.");
}

runDemo().catch(console.error);


