version: '3.8'

services:
  relayer:
    build:
      context: ..
      dockerfile: docker/Dockerfile.relayer
    container_name: cronos-eth-relayer
    restart: unless-stopped
    ports:
      - "8080:8080"  # API server
      - "9090:9090"  # Metrics server
    volumes:
      - ../config/config.yaml:/app/config/config.yaml:ro
      - relayer_logs:/app/logs
    environment:
      - LOG_LEVEL=info
      - CONFIG_PATH=/app/config/config.yaml
    networks:
      - bridge-network
    depends_on:
      - postgres
      - redis
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  postgres:
    image: postgres:15-alpine
    container_name: cronos-eth-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: relayer
      POSTGRES_USER: relayer
      POSTGRES_PASSWORD: relayer_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "5432:5432"
    networks:
      - bridge-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U relayer -d relayer"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: cronos-eth-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass redis_password
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - bridge-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  prometheus:
    image: prom/prometheus:latest
    container_name: cronos-eth-prometheus
    restart: unless-stopped
    ports:
      - "9091:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - bridge-network

  grafana:
    image: grafana/grafana:latest
    container_name: cronos-eth-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning:ro
      - ./grafana/dashboards:/var/lib/grafana/dashboards:ro
    networks:
      - bridge-network
    depends_on:
      - prometheus

  nginx:
    image: nginx:alpine
    container_name: cronos-eth-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    networks:
      - bridge-network
    depends_on:
      - relayer
      - grafana

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  relayer_logs:
    driver: local

networks:
  bridge-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

